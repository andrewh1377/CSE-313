	.ORIG x3000

		;R1 = X-VALUE
		;R2 = Y-VALUE
		;R3 = TEMP REGISTRY (X-Y)
		;R4 = TEMP REGISTRY (ABSX)
		;R5 = TEMP REGISTRY (ABSY)
		;R6 = TEMP REGISTRY (LARGER)


	;SETTING REGISTRIES TO X AND Y VALUES
	LEA R3, xFF			;R3 STARTS AT x3100
	LDI R1, X			;R1 = X-VALUE
	LDI R2, Y			;R2 = Y-VALUE

	
	;R1(X) - R2(Y)
	NOT R2, R2			;NOT(R2)
	ADD R2, R2, #1			;1 IS ADDED TO R2 TO MAKE IT 2'S COMP.
	ADD R3, R1, R2			;R1 + R2 IS NOW STORED IN R3
	STI R3, SUB			;R3 MEM[x3122]	


	;ABSOLUTE VALUE OF X
	ADD R4, R1, #0			;R4 = R1
	BRp PX				;IF POSITIVE, DO NOT NEGATE
	BRz ZX				;IF ZERO, DO NOT NEGATE
	NOT R4, R4			;NEGATE
	ADD R4, R4, #1			;1 IS ADDED TO R4 TO MAKE IT 2'S COMP.
PX	STI R4, ABSX			;
ZX	STI R4, ABSX			;
	
	;ABSOLUTE VALUE OF Y
	ADD R5, R2, #0			;R5 = R2
	BRp PY				;IF POSITIVE, DO NOT NEGATE
	BRz ZY				;IF ZERO, DO NOT NEGATE
	NOT R5, R5			;NEGATE
	ADD R5, R5, #1			;1 IS ADDED TO R5 TO MAKE IT 2'S COMP.
PY	STI R5, ABSY			;
ZY	STI R5, ABSY			;

	;IF ABSX > ABS Y THAN OUTPUT 1. IF ABSY > ABSX THAN OUTPUT 2. 
	;IF ABSX = ABS Y THAN OUTPUT 0
	NOT R5, R5			;NEGATE
	ADD R5, R5, #1			;1 IS ADDED TO R5 TO MAKE IT 2'S COMP. 
	ADD R6, R4, R5			;ADD ABSX AND NEGATED ABSY 
	BRp LARGERX			;BRANCH IF X IS LARGER
	BRn LARGERY			;BRANCH IF Y IS LARGER
	BRz EQUAL			;BRANCH IF X AND Y ARE EQUAL
LARGERX AND R6, R6, #0			;CLEARS R6 
	ADD R6, R6, #1			;ADDS 1 TO R6 SINCE X IS LARGER
	STI R6, LARGER
LARGERY AND R6, R6, #0			;CLEARS R6	
	ADD R6, R6, #2			;ADDS 2 TO R6 SINCE Y IS LARGER
	STI R6, LARGER
EQUAL	AND R6, R6, #0			;INPUT 0 INTO R6 IF X AND Y ARE EQUAL
	STI R6, LARGER			;STORE R6 IN MEMORY LOCATION LABELED "LARGER" 
	

	HALT
	
	X .FILL x3114
	Y .FILL x3115
	SUB .FILL x3116
	ABSX .FILL x3117
	ABSY .FILL x3118
	LARGER .FILL x3119
	
	.END